self.requestFileSystemSync=self.webkitRequestFileSystemSync||self.requestFileSystemSync,self.importScripts("requester-tools.js"),self.requester={},function(){function a(){self.requestFileSystemSync&&(f=f||self.requestFileSystemSync(TEMPORARY,e.SIZEFILES)),self.tools.factoryError(d)}function b(a){try{if(!f)return self.tools.sendRequest(a);let b=new Response(f.root.getFile(a.name,e.READ).file(),{status:200});return self.tools.getResult(a,b)}catch(b){if(-1<b.toString().includes("NotFoundError"))return self.tools.sendRequest(a);self.tools.error(b,a.name)}}function c(){var a=f.root.createReader(),b=a.readEntries();for(var c in b)b[c].remove()}function d(){}let e={SIZEFILES:10485760,READ:{create:0},WRITE:{create:1}},f=null;this.getSavedFile=b,this.saveFile=function(a,b){return b.clone().blob().then(function(c){let d,g=f.root.getFile(a.name,e.WRITE);return a.date=new Date,g.remove(),g=f.root.getFile(a.name,e.WRITE),d=g.createWriter(),d.write(c),self.tools.getResult(a,b)}).catch(self.tools.error)},this.removeAll=c,this.initFileSystem=a}.apply(self.requester),self.addEventListener("message",function(a){let b=a.data;b.useFS&&(self.requester.initFileSystem(),b.saveFile=self.requester.saveFile,b.getSavedFile=self.requester.getSavedFile),self.tools.constants.FILES_SERVER=b.filesServerToUpdate,self.tools.getFile(b).then(a=>{self.postMessage(a)},a=>{self.postMessage(a)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3Rlci13b3JrZXIuanMiXSwibmFtZXMiOlsic2VsZiIsInJlcXVlc3RGaWxlU3lzdGVtU3luYyIsIndlYmtpdFJlcXVlc3RGaWxlU3lzdGVtU3luYyIsImltcG9ydFNjcmlwdHMiLCJyZXF1ZXN0ZXIiLCJmbkluaXRGaWxlU3lzdGVtIiwiZnMiLCJURU1QT1JBUlkiLCJjb25zdEZzIiwiU0laRUZJTEVTIiwidG9vbHMiLCJmYWN0b3J5RXJyb3IiLCJmbkhhbmRsZU1lc3NhZ2VzRXJyb3IiLCJmbkdldFNhdmVkRmlsZSIsImRhdGEiLCJzZW5kUmVxdWVzdCIsImhvb2tSZXBvbnNlIiwiUmVzcG9uc2UiLCJyb290IiwiZ2V0RmlsZSIsIm5hbWUiLCJSRUFEIiwiZmlsZSIsInN0YXR1cyIsImdldFJlc3VsdCIsImUiLCJ0b1N0cmluZyIsImluY2x1ZGVzIiwiZXJyb3IiLCJmbkRlbGV0ZUZpbGVzIiwicmVhZGVyIiwiY3JlYXRlUmVhZGVyIiwiZmlsZXMiLCJyZWFkRW50cmllcyIsImkiLCJyZW1vdmUiLCJjcmVhdGUiLCJXUklURSIsImdldFNhdmVkRmlsZSIsInNhdmVGaWxlIiwicmVzcG9uc2UiLCJjbG9uZSIsImJsb2IiLCJ0aGVuIiwiZmlsZVdyaXRlciIsImZpbGVFbnRyeSIsImRhdGUiLCJEYXRlIiwiY3JlYXRlV3JpdGVyIiwid3JpdGUiLCJjYXRjaCIsInJlbW92ZUFsbCIsImluaXRGaWxlU3lzdGVtIiwiYXBwbHkiLCJhZGRFdmVudExpc3RlbmVyIiwidXNlRlMiLCJjb25zdGFudHMiLCJGSUxFU19TRVJWRVIiLCJmaWxlc1NlcnZlclRvVXBkYXRlIiwiZGF0b3MiLCJwb3N0TWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBSUFBLElBQUksQ0FBQ0MscUJBQUwsQ0FBNkJELElBQUksQ0FBQ0UsMkJBQUwsRUFBb0NGLElBQUksQ0FBQ0MscUIsQ0FDdEVELElBQUksQ0FBQ0csYUFBTCxDQUFtQixvQkFBbkIsQyxDQUNBSCxJQUFJLENBQUNJLFNB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Q0FBakIsQ0FFQSxDQUFPMUMsSUFBSSxDQUFDVSxLQUFMLENBQVdjLFNBQVgsQ0FBcUJWLENBQXJCLENBQTJCMEIsQ0FBM0IsQ0FDUCxDQWJNLEVBYUpVLEtBYkksQ0FhRWxELElBQUksQ0FBQ1UsS0FBTCxDQUFXa0IsS0FiYixDQWNQLENBOUNXLENBcUhaLEtBQUt1QixTQUFMLENBQWlCdEIsQ0FySEwsQ0FzSFosS0FBS3VCLGNBQUwsQ0FBc0IvQyxDQUN0QixDQXZIRCxDQXVIR2dELEtBdkhILENBdUhTckQsSUFBSSxDQUFDSSxTQXZIZCxDLENBNkhBSixJQUFJLENBQUNzRCxnQkFBTCxDQUFzQixTQUF0QixDQUFpQyxTQUFVN0IsQ0FBVixDQUFhLENBQzdDLEdBQUlYLENBQUFBLENBQUksQ0FBR1csQ0FBQyxDQUFDWCxJQUFiLENBR0dBLENBQUksQ0FBQ3lDLEtBSnFDLEdBSzVDdkQsSUFBSSxDQUFDSSxTQUFMLENBQWVnRCxjQUFmLEVBTDRDLENBTTVDdEMsQ0FBSSxDQUFDeUIsUUFBTCxDQUFnQnZDLElBQUksQ0FBQ0ksU0FBTCxDQUFlbUMsUUFOYSxDQU81Q3pCLENBQUksQ0FBQ3dCLFlBQUwsQ0FBb0J0QyxJQUFJLENBQUNJLFNBQUwsQ0FBZWtDLFlBUFMsRUFXN0N0QyxJQUFJLENBQUNVLEtBQUwsQ0FBVzhDLFNBQVgsQ0FBcUJDLFlBQXJCLENBQW9DM0MsQ0FBSSxDQUFDNEMsbUJBWEksQ0FZN0MxRCxJQUFJLENBQUNVLEtBQUwsQ0FBV1MsT0FBWCxDQUFtQkwsQ0FBbkIsRUFBeUI2QixJQUF6QixDQUE4QmdCLENBQUssRUFBSSxDQUN0QzNELElBQUksQ0FBQzRELFdBQUwsQ0FBaUJELENBQWpCLENBQ0EsQ0FGRCxDQUVHL0IsQ0FBSyxFQUFJLENBQ1g1QixJQUFJLENBQUM0RCxXQUFMLENBQWlCaEMsQ0FBakIsQ0FDQSxDQUpELENBS0EsQ0FqQkQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRPRE86IFxyXG4vLyBQYXJhIG5vIGxlZXIgZGVsIGRpc2NvIHVzYXIgdW5hIGxpc3RhIGRlIGxhIHVybCBkZWwgYXJjaGl2byB5IHkgbGEgZmVjaGEgZGUgaW5zZXJjacOzbiBhbCBjYWNoZSB1c2FuZG8gaW5kZXhkYlxyXG5cclxuLy8gVmFyaWFibGVzIGdsb2JhbGVzXHJcbnNlbGYucmVxdWVzdEZpbGVTeXN0ZW1TeW5jID0gc2VsZi53ZWJraXRSZXF1ZXN0RmlsZVN5c3RlbVN5bmMgfHwgc2VsZi5yZXF1ZXN0RmlsZVN5c3RlbVN5bmM7XHJcbnNlbGYuaW1wb3J0U2NyaXB0cygncmVxdWVzdGVyLXRvb2xzLmpzJyk7XHJcbnNlbGYucmVxdWVzdGVyID0ge307XHJcblxyXG4vLyBEZWZpbmljacOzbiBkZWwgbcOzZHVsb1xyXG4oZnVuY3Rpb24gKCkge1xyXG5cdC8vIFNpIHNlIGRlc2VhIGd1YXJkYXIgZGUgZm9ybWEgcGVybWFuZW50ZSBsYXMgYXJjaGl2b3MgZXN0YSBlcyBsYSBtZWRpZGFzXHJcblx0bGV0IGNvbnN0RnMgPSB7XHJcblx0XHRcdFNJWkVGSUxFUzogMTAgKiAxMDI0ICogMTAyNCxcclxuXHRcdFx0UkVBRDogeyBjcmVhdGU6IDAgfSwgICAvLyBPYmpldG8gcGFyIGN1YW5kbyBzZSBxdWllcmUgbGVlclxyXG5cdFx0XHRXUklURTogeyBjcmVhdGU6IDEgfSAgIC8vICBPYmpldG8gcGFyIGN1YW5kbyBzZSBxdWllcmUgZ3VhcmRhclxyXG5cdFx0fSwgXHJcblx0XHQvLyBTaXN0ZW1hIGRlIGFyY2hpdm9zIEFQSVxyXG5cdFx0ZnMgPSBudWxsO1xyXG5cclxuXHQvKlxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIE9idGllbmUgZWwgQVBJIHBhcmEgdXNhciBlbCBGaWxlU3lzdGVtXHJcblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCovXHJcblx0ZnVuY3Rpb24gZm5Jbml0RmlsZVN5c3RlbSgpIHtcclxuXHRcdC8vIENvbXBhdGliaWxpZGFkIGNvbiBuYXZlZ2Fkb3JlcyBwYXJhIHF1ZSBubyBzZSBnZW5lcmUgZXJyb3Jlc1xyXG5cdFx0aWYgKHNlbGYucmVxdWVzdEZpbGVTeXN0ZW1TeW5jKSBmcyA9IGZzIHx8IHNlbGYucmVxdWVzdEZpbGVTeXN0ZW1TeW5jKFRFTVBPUkFSWSwgY29uc3RGcy5TSVpFRklMRVMpO1xyXG5cdFx0c2VsZi50b29scy5mYWN0b3J5RXJyb3IoZm5IYW5kbGVNZXNzYWdlc0Vycm9yKTsgICAgICAgIFxyXG5cdH1cclxuXHJcblx0LypcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBQYXLDoW1ldHJvczpcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBAZGF0YTogICAgICAge29iamVjdH0gICAgSW5mb3JtYWNpw7NuIGRlIGxhIHBldGljacOzbiBhIHJlYWxpemFyLlxyXG5cdFx0Ly8gQHJlcG9uc2U6ICAgIHtyZXNwb25zZX0gIFJlc3B1ZXN0YSBkZWwgc2Vydmlkb3IuXHJcblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU2UgZ3VhcmRhIGVsIGJsb2IgZGVudHJvIGRlbCBleHBsb3JhZG9yXHJcblx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCovXHJcblx0ZnVuY3Rpb24gZm5TYXZlRmlsZShkYXRhLCByZXNwb25zZSkge1xyXG5cdFx0cmV0dXJuIHJlc3BvbnNlLmNsb25lKCkuYmxvYigpLnRoZW4oZnVuY3Rpb24gKGJsb2IpIHtcclxuXHRcdFx0Ly8gU2UgY3JlYSBvIHNlIGxlZSBlbCBhcmNoaXZvXHJcblx0XHRcdGxldCBmaWxlRW50cnkgPSBmcy5yb290LmdldEZpbGUoZGF0YS5uYW1lLCBjb25zdEZzLldSSVRFKSxcclxuXHRcdFx0XHRmaWxlV3JpdGVyO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gU2UgZWxpbWluYSBlbCBhcmNoaXZvLCBTZSB2dWVsdmUgYSBjcmVhciBlbCBhcmNoaXZvLCBTZSBlc2NyaWJlIGVsIGFyY2hpdm9cclxuXHRcdFx0ZGF0YS5kYXRlID0gbmV3IERhdGUoKTtcclxuXHRcdFx0ZmlsZUVudHJ5LnJlbW92ZSgpO1xyXG5cdFx0XHRmaWxlRW50cnkgPSBmcy5yb290LmdldEZpbGUoZGF0YS5uYW1lLCBjb25zdEZzLldSSVRFKTtcclxuXHRcdFx0ZmlsZVdyaXRlciA9IGZpbGVFbnRyeS5jcmVhdGVXcml0ZXIoKTtcclxuXHRcdFx0ZmlsZVdyaXRlci53cml0ZShibG9iKTtcclxuXHJcblx0XHRcdHJldHVybiBzZWxmLnRvb2xzLmdldFJlc3VsdChkYXRhLCByZXNwb25zZSk7XHJcblx0XHR9KS5jYXRjaChzZWxmLnRvb2xzLmVycm9yKTtcclxuXHR9IC8vIGZpbiBtw6l0b2RvXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblx0LypcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBQYXLDoW1ldHJvczpcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBAZGF0YToge29iamVjdH0gSW5mb3JtYWNpw7NuIGRlIGxhIHBldGljacOzbiBhIHJlYWxpemFyLlxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciBlbCBhcmNoaXZvIG8gbGEgcGV0aWNpw7NuIHNvbGljaXRhZGEsIGN1YW5kbyBlbCBhcmNoaXZvIGV4aXN0ZSDDqXN0ZSBzZSBsZWUgZGVsIG5hdmVnYWRvciBcclxuXHRcdC8vIHkgc2UgcmV0b3JuYSBsYSB1cmwgZGVsIGJsb2IgbyBlbCBjb250ZW5pZG8gZGVsIMOpc3RlIGRlcGVuZGllbmRvIGRlbCB0aXBvIGRlIGFyY2hpdm8gKG1pbWUpLCBzaSBzZSBwcmVzZW50YSBcclxuXHRcdC8vIHVuIGVycm9yIGFsIGxlZXIgZWwgYXJjaGl2byBkZWwgbmF2ZWdhZG9yLCBzZSBoYWNlIGxhIHBldGljacOzbiBhbCBzZXJ2aWRvci5cclxuXHRcdC8vXHJcblx0XHQvLyBDdWFuZG8gZWwgc2Vydmlkb3IgcmVzcG9uZGEgbGEgcGV0aWNpw7NuIGNvbiBPSyBzZSBndWFyZGFyw6EgbGEgcmVzcHVlc3RhIGVuIGVsIG5hdmVnYWRvciBzaSBhc8OtIHNlIGNvbmZpZ3VyYVxyXG5cdFx0Ly8gZW4gZWwgcGFyw6FtZXRybyBkZSBsYSBmdW5jacOzbiBkZSBpbmljaW8gQGNhY2hlLlxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQqL1xyXG5cdGZ1bmN0aW9uIGZuR2V0U2F2ZWRGaWxlKGRhdGEpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGlmKCFmcykgcmV0dXJuIHNlbGYudG9vbHMuc2VuZFJlcXVlc3QoZGF0YSk7XHJcblx0XHRcdGxldCBob29rUmVwb25zZSA9IG5ldyBSZXNwb25zZShmcy5yb290LmdldEZpbGUoZGF0YS5uYW1lLCBjb25zdEZzLlJFQUQpLmZpbGUoKSwgeyBzdGF0dXM6IDIwMCB9KTtcclxuXHRcdFx0cmV0dXJuIHNlbGYudG9vbHMuZ2V0UmVzdWx0KGRhdGEsIGhvb2tSZXBvbnNlKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHQvKlxyXG5cdFx0XHRcdC8vIEN1YW5kbyBzZSBnZW5lcmEgw6lzdGUgZXJyb3IgYWwgaGFjZXIgbGEgcGV0aWNpw7NuIGEgdHJhdsOpcyBkZSBsYSBpbnRlcmZheiBGaWxlU3lzdGVtIFxyXG5cdFx0XHRcdC8vIHNlIHJlYWxpemEgbGEgcGV0aWNpw7NuIGFsIHNlcnZpZG9yXHJcblx0XHRcdCovXHJcblx0XHRcdGlmIChlLnRvU3RyaW5nKCkuaW5jbHVkZXMoJ05vdEZvdW5kRXJyb3InKSA+IC0xKSByZXR1cm4gc2VsZi50b29scy5zZW5kUmVxdWVzdChkYXRhKTtcclxuXHRcdFx0ZWxzZSBzZWxmLnRvb2xzLmVycm9yKGUsIGRhdGEubmFtZSk7XHJcblx0XHR9XHJcblx0fSAvLyBmaW5lbmQgZnVuY3Rpb25cclxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuXHQvKlxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIEZ1bmNpw7NuIHBhcmEgZWxpbWluYXIgbG9zIGFyY2hpdm9zIGRlbCBuYXZlZ2Fkb3JcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ki9cclxuXHRmdW5jdGlvbiBmbkRlbGV0ZUZpbGVzKCkge1xyXG5cdFx0dmFyIHJlYWRlciA9IGZzLnJvb3QuY3JlYXRlUmVhZGVyKCksXHJcblx0XHRcdGZpbGVzID0gcmVhZGVyLnJlYWRFbnRyaWVzKCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSBpbiBmaWxlcykge1xyXG5cdFx0XHRmaWxlc1tpXS5yZW1vdmUoKTtcclxuXHRcdH0gLy8gZW5kIGZvclxyXG5cclxuXHRcdC8qXHJcblx0XHRcdFBhcmEgb2J0ZW5lciB1biBhcmNoaXZvIHkgZWxtaW5hcmxvXHJcblx0XHRcdHZhciBmaWxlRW50cnkgPSBmcy5yb290LmdldEZpbGUoJ3Rlc3QuY3NzJywgd3JpdGUpO1xyXG5cdFx0XHRmaWxlRW50cnkucmVtb3ZlKCk7XHJcblx0XHQqL1xyXG5cdH0gLy8gZW5kIGZ1bmN0aW9uXHJcblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcblx0LypcclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBTZSBlbnZpYSBhIGxvcyBjbGllbnRlcyBlbCBtZW5zYWplIHF1ZSBzZSBwYXNhIGNvbW8gcMOhcmFtZXRyb1xyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFBhcsOhbWV0cm9zOlxyXG5cdFx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIEBtc2o6ICAgIHtvYmplY3R9ICAgIEluZm9ybWFjacOzbiBkZSBsYSBwZXRpY2nDs24gYSByZWFsaXphci5cclxuXHRcdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ki9cclxuXHRmdW5jdGlvbiBmbkhhbmRsZU1lc3NhZ2VzRXJyb3IobXNqKSB7XHJcblx0XHRjb25zb2xlLnRyYWNlKG1zaik7XHJcblx0fSAvLyBmaW4gbcOpdG9kb1xyXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5cdC8vIFB1YmxpYyBBUElcclxuXHR0aGlzLmdldFNhdmVkRmlsZSA9IGZuR2V0U2F2ZWRGaWxlO1xyXG5cdHRoaXMuc2F2ZUZpbGUgPSBmblNhdmVGaWxlO1xyXG5cdHRoaXMucmVtb3ZlQWxsID0gZm5EZWxldGVGaWxlcztcclxuXHR0aGlzLmluaXRGaWxlU3lzdGVtID0gZm5Jbml0RmlsZVN5c3RlbTtcclxufSkuYXBwbHkoc2VsZi5yZXF1ZXN0ZXIpO1xyXG4vLyBFbmQgbmFtZXNwYWNlIHJlcXVlc3RlclxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gUmVjZXBjacOzbiBkZWwgQXBwXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHRsZXQgZGF0YSA9IGUuZGF0YTtcclxuXHRcclxuXHQvLyBVc2UgRmlsZVN5c3RlbVxyXG5cdGlmKGRhdGEudXNlRlMpIHtcclxuXHRcdHNlbGYucmVxdWVzdGVyLmluaXRGaWxlU3lzdGVtKCk7XHJcblx0XHRkYXRhLnNhdmVGaWxlID0gc2VsZi5yZXF1ZXN0ZXIuc2F2ZUZpbGU7XHJcblx0XHRkYXRhLmdldFNhdmVkRmlsZSA9IHNlbGYucmVxdWVzdGVyLmdldFNhdmVkRmlsZTtcclxuXHR9XHJcblx0XHJcblx0Ly8gR2V0IEZpbGVcclxuXHRzZWxmLnRvb2xzLmNvbnN0YW50cy5GSUxFU19TRVJWRVIgPSBkYXRhLmZpbGVzU2VydmVyVG9VcGRhdGU7XHJcblx0c2VsZi50b29scy5nZXRGaWxlKGRhdGEpLnRoZW4oZGF0b3MgPT4ge1xyXG5cdFx0c2VsZi5wb3N0TWVzc2FnZShkYXRvcyk7XHJcblx0fSwgZXJyb3IgPT4ge1xyXG5cdFx0c2VsZi5wb3N0TWVzc2FnZShlcnJvcik7XHJcblx0fSk7XHJcbn0pO1xyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuLyogIFxyXG5cdC8vIEVzdGUgY8OzZGlnbyBlcyBwYXJhIGVsaW1pbmFyIGFyY2hpdm9zXHJcblx0c2VsZi5yZXF1ZXN0RmlsZVN5c3RlbVN5bmMgPSBzZWxmLndlYmtpdFJlcXVlc3RGaWxlU3lzdGVtU3luYyB8fCBzZWxmLnJlcXVlc3RGaWxlU3lzdGVtU3luYztcclxuXHR2YXIgbG9jYWxTaXplRmlsZXMgPSAxMCoxMDI0KjEwMjQsIHdyaXRlID0geyBjcmVhdGU6dHJ1ZSB9O1xyXG5cdHZhciBmcyA9IHJlcXVlc3RGaWxlU3lzdGVtU3luYyhURU1QT1JBUlksIGxvY2FsU2l6ZUZpbGVzKTtcclxuXHR2YXIgZmlsZUVudHJ5ID0gZnMucm9vdC5nZXRGaWxlKCd0ZXN0LmNzcycsIHdyaXRlKTtcclxuXHRmaWxlRW50cnkucmVtb3ZlKCk7XHJcbiovXHJcblxyXG4vKlxyXG5cdCAgIFRPRE8gSGFjZXIgcGFyYSBxdWUgZnVuY2lvbmUgY29uIGxhIG51ZXZhIGltcGxlbWVudGFjacOzblxyXG5cdFx0XHRcdFx0Ly8gU2kgZWwgYXJjdml2byB2YSBoYWNlciB0cmF0YWRvIGNvbW8gdGV4dG8gZW50b25jZXMgc2UgbGVlIGVsIGFyY2hpdm8geSBcclxuXHRcdFx0XHRcdC8vIHNlIHJldG9ybmEgZWwgdGV4dG8gcXVlIGhheSBkZW50cm8gZGVsIGFyY2hpdm9cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoZGF0YS5pc1RleHQpIHtcclxuXHRcdFx0XHRcdHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cdFx0XHRcdFx0cmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gZS50YXJnZXQucmVzdWx0O1xyXG5cdFx0XHRcdFx0XHRkYXRhLnRleHQgPSAoZGF0YS5taW1lICE9IE1JTUVTLlRFWFQpICYmIHJlc3VsdC5sZW5ndGggPyBKU09OLnBhcnNlKHJlc3VsdCkgOiByZXN1bHQ7XHJcblx0XHRcdFx0XHRcdHJlc29sdmUoeyBibG9iOiBkYXRhLmJsb2IsIHJlc3VsdDogZGF0YS50ZXh0LCBwYXRoOiBkYXRhLnNyYywgb2JzZXJ2ZWRJZDogZGF0YS5vYnNlcnZlZElkIH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRyZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCByZWplY3QpO1xyXG5cdFx0XHRcdFx0cmVhZGVyLnJlYWRBc1RleHQoZGF0YS5ibG9iKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmVzb2x2ZSh7IGJsb2I6IGRhdGEuYmxvYiwgcmVzdWx0OiBkYXRhLnRleHQsIHBhdGg6IGRhdGEuc3JjLCBvYnNlcnZlZElkOiBkYXRhLm9ic2VydmVkSWQgfSk7XHJcblx0XHRcdFx0fVxyXG5cclxuKi8iXSwiZmlsZSI6ImFzc2V0cy9qcy93b3JrZXJzL3JlcXVlc3Rlci13b3JrZXIuanMifQ==
