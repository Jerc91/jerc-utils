self.importScripts("/assets/js/workers/requester-tools.js"),self.requester={},function(){function a(a){return"[object Function]"==Object.prototype.toString.call(a)}function b(b){var d=c(...arguments);if(a(b))return d?b(...d):b(d)}function c(){var a,b=arguments.length;if(1<b){a=[];for(var c=1;c<b;c++)a[a.length]=arguments[c]}return a}function d(){const a={},d=this;return d.on=(c,e)=>(a[c]=function(){return b(e,...arguments)},d),d.off=b=>(delete a[b],d),d.trigger=function(b){let d=c(...arguments)||[];return a[b](...d)},d}Object.defineProperty(self,"command",{get:()=>new d})}(),function(){function a(){function a(a){return c=a}return j?Promise.resolve():caches.keys().then(b=>Promise.all(b.map((a,c)=>{if(a!==d)return caches.delete(b[c])})).then(()=>caches.has(d).then(b=>{let c=caches.open(d);return b?c.then(a):c.then(b=>{a(b).addAll(g)})}).then(()=>j=!0))).catch(self.tools.error)}function b(a){return self.clients.matchAll().then(b=>{b.forEach(b=>b.postMessage(`SW Says: '${JSON.stringify(a)}'`))})}let c,d=self.tools.constants.CACHE_VERSION,e=self.tools.constants.HEADER_JR,f=self.tools.constants.FILESTOUPDATE,g=[""],h=self.command.on("request",function(a){return navigator.onLine||a.src!=f?self.tools.getFile(a):Promise.resolve({result:{},path:f,observedId:a.observedId})}).on("filesToUpdate",function(){return navigator.onLine?fetch(f,{headers:{cache:"no-cache"}}).then(a=>a.json()).then(a=>self.tools.constants.FILES_SERVER=a):Promise.resolve(self.tools.constants.FILES_SERVER={})}),i="",j=!1,k=[];k=location.href.split("/"),i=k.splice(0,k.length-1).join("/"),i+="/",self.tools.factoryError(b),this.handlerInstall=function(b){b.waitUntil(a().then(self.skipWaiting).catch(self.tools.error))},this.handlerActive=function(b){b.waitUntil(a().then(()=>self.clients.claim()).catch(self.tools.error))},this.handlerFetch=function(b){if(b.request.headers.has(e))return b.request.headers.remove(e),b.respondWith(fetch(b.request));if(!b.request.url.startsWith(self.location.origin))return b.respondWith(fetch(b.request));let c=a().then(()=>{let a,c,d=b.request,e=d.url.replace(i,"");return a=e&&!e.includes("#!")&&e.indexOf("?")?e:"index.html",self.tools.getFile({src:a,fromFetch:!0})});return b.respondWith(c)},this.handlerMessage=function(a){let b=a.ports[0];return h.trigger(a.data.command,a.data).then(a=>b.postMessage(a)).catch(a=>b.postMessage(a))},this.sendMessageClients=b}.call(self.requester),self.addEventListener("install",self.requester.handlerInstall),self.addEventListener("activate",self.requester.handlerActive),self.addEventListener("fetch",self.requester.handlerFetch),self.addEventListener("message",self.requester.handlerMessage);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
